<!DOCTYPE html>
<html dir="ltr">

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
<!-- #BeginEditable "doctitle" -->
<title>Mobile App Development</title>
<!-- #EndEditable -->
<style type="text/css">
.auto-style6 {
	font-size: small;
	font-weight: bold;
}
.auto-style7 {
	border-width: 0px;
}
.auto-style8 {
	font-weight: bold;
}
.auto-style9 {
	text-align: center;
	font-weight: bold;
	font-size: large;
}
.auto-style10 {
	font-size: large;
	font-weight: bold;
}
.auto-style11 {
	font-size: medium;
	border-left-color: #A0A0A0;
	border-right-color: #C0C0C0;
	border-top-color: #A0A0A0;
	border-bottom-color: #C0C0C0;
	padding: 1px;
}
.auto-style12 {
	text-align: center;
	font-weight: bold;
}
.auto-style13 {
	text-align: center;
}
.auto-style14 {
	margin-left: 0px;
}
</style>
</head>

<body style="font-family: Arial, Helvetica, sans-serif; font-size: small">

<p>
<b>
<a href="index.htm" title="Home">
<img alt="banner" height="200" src="images/Banner.png" width="100%" class="auto-style7"></a></b><span class="auto-style8">|
<a href="index.htm">About</a></span><span class="auto-style6"> 
| 
<b> 
<a href="creatingdigitalaudio.htm">Creating Digital Audio</a> | 
<a href="creatingdigitalvideo.htm">Creating Digital Video
</a></b>|</span><b><span class="auto-style8"><a href="creatingdigitalanimation.htm"> Creating Digital Animation</a> 
|
<a href="creatingdigitalgraphics.htm">Creating Digital Graphics</a> |
<a href="digitalortfolio.htm">Digital Portfolio</a> | 
<a href="networking.htm">Networking</a> | 
<a href="websitedevelopment.htm">Website 
Development</a> | 
<a href="exams.htm">Exams</a> |
<a href="contact.htm">
Contact </a></span><span class="auto-style6"> 
|</span></b></p>

<table style="width: 100%">
	<tr>
		<td>
		<table style="width: 100%">
			<tr>
				<td style="width: 301px; height: 25px;"></td>
				<td class="auto-style9" style="width: 635px; height: 25px;">Mobile App 
				Development</td>
				<td class="auto-style10" style="width: 226px; height: 25px;"></td>
			</tr>
			<tr>
				<td style="width: 301px">&nbsp;</td>
				<td style="width: 635px">&nbsp;</td>
				<td style="width: 226px">&nbsp;</td>
			</tr>
			<tr>
				<td style="width: 301px">&nbsp;</td>
				<td style="width: 635px">I<meta charset="utf-8"><b id="docs-internal-guid-c5f1616b-7fff-760a-64d1-1bea357edd2a" style="font-weight: normal;"><p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;">
				<span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre; white-space: pre-wrap;">
				In Mobile App Development we looked at two apps that we used on 
				our phones. The idea was to look at the features that were 
				available in the app and to look at their strengths and 
				weaknesses. We had to decide if they were fit for purpose and if 
				they could be improved. I looked at my Argos Card App and it was 
				quite straight forward. It did everything a user could need to 
				do on the app. However it did not update the balance in real 
				time. After some research it was discovered that this was to do 
				with the Argos system itself and not the app. The other app I 
				chose was WhatsApp and this was a different Kettle of fish 
				because there were so many features that it would be difficult 
				to know all the features nevermind how they worked. Also there 
				was so much going on in the background that the user would never 
				see and finding information about this was quite difficult. We 
				also looked at what features it used on the phone's own services 
				like it would use the camera and microphone for recording audio, 
				images and video. These were not written into the program, they 
				were just called by the program and the user would give 
				permission for the program to use these services.</span></p>
				<p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;">
				<span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre; white-space: pre-wrap;">
				So I had picked two programs from completely different sides of 
				the specdrum and it allowed me to understand how different an 
				app could be.</span></p>
				<p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;">
				<span style="font-size: 11pt; font-family: Arial; color: #000000; background-color: transparent; font-weight: 400; font-style: normal; font-variant: normal; text-decoration: none; vertical-align: baseline; white-space: pre; white-space: pre-wrap;">
				As our task we were asked to design a program for preschool 
				children that would help with their learning. We had to provide 
				two program apps, one the main program and one to be presented 
				as an alternative option. I did have an idea for a maths program 
				that I felt was good but went with an alphabet learning app. The 
				idea was that there were two choices in the app: the child could 
				either play a guessing game or could learn the alphabet. When 
				learning the alphabet a letter would be displayed and the sound 
				of the letter would be played. When the child clicked on the 
				letter the next letter in the alphabet would be played. The 
				child could quit at any time by clicking on a button where they 
				would be returned to the main menu. The other choice was a 
				guessing game where 4 letters were placed onto the screen then a 
				letter to guess would be played as an audio file. If they 
				guessed right they were congratulated but if they got it wrong 
				they were told to guess again until they got it right. I felt it 
				was beneficial to continue guessing because when they eventually 
				got it right it was another way of teaching them the sound of 
				the letter in question. The program would continue guessing 
				letters till the child decided to quit. I made sure that all 
				instructions were available as audio sounds as a child like this 
				would not be able to read instructions on the screen. I had a 
				lot to learn and it was quite difficult as Code.org used 
				JavaScript that I was not very familiar with and it was quite a 
				big learning curve to get the app to behave as I wanted it to. I 
				also had to source suitable images of letters to use in the app. 
				I used Adobe Photoshop and saved all images as PNG files. They 
				seemed to be the best choice as I required the background of the 
				letters to be transparent. I also sourced some letter sounds 
				that I used in the app.</span></p>
				</b><br class="Apple-interchange-newline"></td>
				<td style="width: 226px">&nbsp;</td>
			</tr>
			<tr>
				<td style="width: 301px">&nbsp;</td>
				<td class="auto-style12" style="width: 635px">Here You Will Find 
				Screen Shots Of The App I Created</td>
				<td style="width: 226px">&nbsp;</td>
			</tr>
			<tr>
				<td style="width: 301px">&nbsp;</td>
				<td class="auto-style13" style="width: 635px">
				<img alt="App Screen Shot" src="images/MobAppsPlay.jpg" class="auto-style14" height="702" width="410"></td>
				<td style="width: 226px">&nbsp;</td>
			</tr>
			<tr>
				<td style="width: 301px">&nbsp;</td>
				<td class="auto-style13" style="width: 635px">&nbsp;</td>
				<td style="width: 226px">&nbsp;</td>
			</tr>
			<tr>
				<td style="width: 301px">&nbsp;</td>
				<td class="auto-style13" style="width: 635px">
				<img alt="Screen Shot Of App" src="images/MobileAppLearn.jpg" height="695" width="410"></td>
				<td style="width: 226px">&nbsp;</td>
			</tr>
			<tr>
				<td style="width: 301px">&nbsp;</td>
				<td class="auto-style13" style="width: 635px">Heres a link to 
				the app at code.org:
				<a href="https://studio.code.org/projects/applab/KOLwZG5xR0sYzpf_xVIkGM14dfSkwWgXByeh8jU_oGo">
				https://studio.code.org/projects/applab/KOLwZG5xR0sYzpf_xVIkGM14dfSkwWgXByeh8jU_oGo</a><br>
				</td>
				<td style="width: 226px">&nbsp;</td>
			</tr>
			<tr>
				<td style="width: 301px">&nbsp;</td>
				<td class="auto-style13" style="width: 635px">&nbsp;</td>
				<td style="width: 226px">&nbsp;</td>
			</tr>
			<tr>
				<td style="width: 301px">&nbsp;</td>
				<td class="auto-style12" style="width: 635px">Below Is A Listing 
				Of The App Program Code</td>
				<td style="width: 226px">&nbsp;</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<table style="width: 100%">
	<tr>
		<td>&nbsp;</td>
		<td class="auto-style9"><span class="auto-style11">Code&nbsp; From The 
		Program I Created</span><br></td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>&nbsp;</td>
		<td>// Setup 4 arrays storing the file names of the leter image files. 
		Splitting the alphabet into 4 arrays avoids having to use a <br>// 
		compare routine. Because the alphabet does not devide equally into 4 
		there is a need for 2 Arrays with 7 letter file names<br>// and 2 Arrays 
		with 6 letter file names.<br><br>var LettersAG = 
		["LTRSml01.png","LTRSml02.png","LTRSml03.png","LTRSml04.png","LTRSml05.png","LTRSml06.png","LTRSml07.png"];<br>
		var LettersHN = 
		["LTRSml08.png","LTRSml09.png","LTRSml10.png","LTRSml11.png","LTRSml12.png","LTRSml13.png","LTRSml14.png"];
		<br>var LettersOT = 
		["LTRSml15.png","LTRSml16.png","LTRSml17.png","LTRSml18.png","LTRSml19.png","LTRSml20.png"];<br>
		var LettersUZ = 
		["LTRSml21.png","LTRSml22.png","LTRSml23.png","LTRSml24.png","LTRSml25.png","LTRSml26.png"];
		<br>var LearnLetterAZ = 
		["LTRSml01.png","LTRSml02.png","LTRSml03.png","LTRSml04.png","LTRSml05.png","LTRSml06.png","LTRSml07.png","LTRSml08.png","LTRSml09.png","LTRSml10.png","LTRSml11.png","LTRSml12.png","LTRSml13.png",<br>
		"LTRSml14.png","LTRSml15.png","LTRSml16.png","LTRSml17.png","LTRSml18.png","LTRSml19.png","LTRSml20.png","LTRSml21.png","LTRSml22.png","LTRSml23.png","LTRSml24.png","LTRSml25.png","LTRSml26.png",];<br>
		<br><br>// Setup the array with all the file names of the audio files to 
		be used.<br><br>var AlphaSound = 
		["a.mp3","b.mp3","c.mp3","d.mp3","e.mp3","f.mp3","g.mp3","h.mp3","i.mp3","j.mp3","k.mp3","l.mp3","m.mp3","n.mp3","o.mp3","p.mp3","q.mp3","r.mp3","s.mp3","t.mp3","u.mp3","v.mp3","w.mp3","x.mp3","y.mp3","z.mp3"];<br>
		<br>// Setup an array that will store the file names chosen using the 
		random number function.<br><br>var LetterGuess = [0,0,0,0];<br><br>var 
		LearnLetter = 0;<br>var LearnSound = 0;<br><br>var GuessLetter = 0;<br>
		<br>// A random number is generated between 0 and 7 and stored as a 
		variable. This is choosing a random letter for the first 2 arrays.<br>
		<br>var RandomLetter = 0;<br><br><br>// A random number is generated 
		between 0 and 6 and stored as a variable. This is choosing a random 
		letter for the second 2 arrays.<br><br>var RandomLetter2 = 0;<br><br>
		<br>// After the 4 letter file names have been selected, a random number 
		between 0 and 3 is generated to choose which will be the <br>// the 
		letter to guess and is stored in the variable.<br><br>var GuessTheLetter 
		= 0;<br><br>// This variable is used to know which is the letter to 
		guess. It is used when the user enters input.<br>// It is the same as 
		the GuessTheLetter variable. <br><br>var ImageSet = 0;<br><br>// This is 
		a call to the main function of the program.<br><br>mainProgram();<br>
		<br>//This is the main function of the program.<br><br>function 
		mainProgram() {<br><br><br>RandomLetter = randomNumber(0,6); // Stores a 
		random number.<br><br>RandomLetter2 = randomNumber(0,5);//Stores a 
		random number.<br><br>GuessTheLetter = randomNumber(0,3);// Stores a 
		random number.<br><br>// This waits for the button to be clicked then 
		starts the game.<br><br>onEvent("PlayButton", "click", function( ) { <br>
		setScreen("screen2");<br><br><br>LetterGuess [0] = RandomLetter +1 ;// 
		This sets the real number of LetterGuess [0]. <br>LetterGuess [1] = 
		RandomLetter + 8;// This sets the real number of LetterGuess [1]. <br>
		LetterGuess [2] = RandomLetter2 + 15;// This sets the real number of 
		LetterGuess [2]. <br>LetterGuess [3] = RandomLetter2 + 21;// This sets 
		the real number of LetterGuess [3]. <br><br><br>GuessLetter = 
		LetterGuess[GuessTheLetter];// Sets the variable GuessLetter to 
		LetterGuess array and whatever <br>// random number GuessTheLetter 
		generated.<br><br>ImageSet = GuessTheLetter + 1;// Sets the random 
		number generated to the real number because 0 to 3 was generated<br>// 
		the real number is +1.<br><br><br>// Each arrays contents willbe loaded 
		to a specific image on the screen. LetterAG to image 1, LetterHN to 
		image 2,<br>// LetterOT to image 3 and LetterUZ to image 4.<br><br>// 
		Takes the file name chosen by the random number and loads it to image 1.<br>
		<br>setImageURL("image1",LettersAG[RandomLetter]); <br><br>// Takes the 
		file name chosen by the random number and loads it to image 2.<br><br>
		setImageURL("image2",LettersHN[RandomLetter]); <br><br><br>// Takes the 
		file name chosen by the random number and loads it to image 3.<br><br>
		setImageURL("image3",LettersOT[RandomLetter2]);<br><br><br>// Takes the 
		file name chosen by the random number and loads it to image 4.<br><br>
		setImageURL("image4",LettersUZ[RandomLetter2]);<br><br><br>// Welcomes 
		the user and tells them to press the blue button to hear the letter they 
		are to guess.<br><br>playSpeech("Hello And Welcome To Guess The 
		Letter!Press The BLUE Button To Hear The Sound Of The Letter To Be 
		Guessed!", "female", "English");<br><br><br>// This was put in to 
		monitor the program, to make sure it was doing what was exspected of it.<br>
		// It outputs data in the output console.Wherever there is a console.log 
		it is used to monitor output from the program.<br><br>
		console.log(LettersAG[RandomLetter]);<br>
		console.log(LettersHN[RandomLetter]);<br>
		console.log(LettersOT[RandomLetter2]);<br>
		console.log(LettersUZ[RandomLetter2]);<br>console.log(LetterGuess[0]);<br>
		console.log(LetterGuess[1]);<br>console.log(LetterGuess[2]);<br>
		console.log(LetterGuess[3]);<br>console.log(GuessTheLetter);<br>
		console.log(GuessLetter);<br><br>});<br>}<br>// This is a function 
		called changeScreen.<br>// It resets all variables to 0 then generates 
		new random numbers<br>// And a new letter to guess.<br><br>function 
		changeScreen() {<br>ImageSet = (0);<br>GuessLetter = (0);<br>
		RandomLetter = (0);<br>RandomLetter2 =(0);<br>GuessTheLetter = (0);<br>
		<br>// Generates new random numbers and store them in the appropiate 
		variable.<br><br>RandomLetter = randomNumber(0,6);<br>RandomLetter2 = 
		randomNumber(0,5);<br>GuessTheLetter = randomNumber(0,3);<br><br>// the 
		rest is a repeat of the function mainProgram.<br><br>ImageSet = ( 
		GuessTheLetter +1 );<br>LetterGuess [0] = RandomLetter +1 ;<br>
		LetterGuess [1] = RandomLetter + 8;<br>LetterGuess [2] = RandomLetter2 + 
		15;<br>LetterGuess [3] = RandomLetter2 + 21;<br><br>GuessLetter = 
		LetterGuess[GuessTheLetter];<br><br>
		setImageURL("image1",LettersAG[RandomLetter]); <br>
		setImageURL("image2",LettersHN[RandomLetter]); <br><br>
		setImageURL("image3",LettersOT[RandomLetter2]);<br>
		setImageURL("image4",LettersUZ[RandomLetter2]);<br><br>
		onEvent("PlaySoundbutton", "click", function( ) {<br>
		playSound(AlphaSound[GuessLetter-1], false);<br>// 
		setTimeout(console.log("PlaySoundbutton clicked!"),10000);<br>
		console.log(AlphaSound[GuessLetter -1]);<br>});<br><br><br>}<br>// plays 
		the sound file of the letter to be guessed.<br><br>
		onEvent("PlaySoundbutton", "click", function( ) {<br>
		//setTimeout(playSound(AlphaSound[GuessLetter-1], false),20000);<br>
		playSound(AlphaSound[GuessLetter-1], false);<br>// 
		setTimeout(console.log("PlaySoundbutton clicked!"),10000);<br>
		console.log(AlphaSound[GuessLetter -1]);<br>});<br><br>// This section 
		of code deals with the input from the user. If the user chooses the 
		incorrect letter they are told to try again.<br>// otherwise they are 
		congradulated and the program goes to the function changeScreen which 
		loads a new set of letters<br>// on the screen. This continues to loop 
		around until the user chooses to stop the game.<br>// The variable 
		ImageSet is used to know which image the letter to guess is on.<br><br>
		onEvent("image1", "click", function( ) {<br>if (ImageSet == "1") {<br>
		stopSound(AlphaSound[GuessLetter-1]);<br>playSpeech("Well done You Have 
		Chosen the correct letter", "female", "English");<br>playSpeech("Lets 
		Play Again! Click the Blue Button To hear The Letter To Be Guessed", 
		"female", "English");<br>// setTimeout(changeScreen, 5000);<br>
		changeScreen();<br>} else {<br>stopSound(AlphaSound[GuessLetter-1]);<br>
		playSpeech("Sorry! Please try again", "female", "English"); } <br>});<br>
		<br>onEvent("image2", "click", function( ) {<br>if (ImageSet == "2") {<br>
		stopSound(AlphaSound[GuessLetter-1]);<br>playSpeech("Well done You Have 
		Chosen the correct letter", "female", "English");<br>playSpeech("Lets 
		Play Again! Click the Blue Button To hear The Letter To Be Guessed", 
		"female", "English");<br>// setTimeout(changeScreen, 5000);<br>
		changeScreen();<br>} else {<br>stopSound(AlphaSound[GuessLetter-1]);<br>
		playSpeech("Sorry! Please try again", "female", "English"); } <br>});<br>
		<br>onEvent("image3", "click", function( ) {<br>if (ImageSet == "3") {<br>
		stopSound(AlphaSound[GuessLetter-1]);<br>playSpeech("Well done You Have 
		Chosen the correct letter", "female", "English");<br>playSpeech("Lets 
		Play Again! Click the Blue Button To hear The Letter To Be Guessed", 
		"female", "English");<br>// setTimeout(changeScreen, 5000);<br>
		changeScreen();<br>} else { <br>stopSound(AlphaSound[GuessLetter-1]);<br>
		playSpeech("Sorry! Please try again", "female", "English"); } <br>});<br>
		<br>onEvent("image4", "click", function( ) {<br>if (ImageSet == "4") {<br>
		stopSound(AlphaSound[GuessLetter-1]);<br>playSpeech("Well done You Have 
		Chosen the correct letter", "female", "English");<br>playSpeech("Lets 
		Play Again! Click the Blue Button To hear The Letter To Be Guessed", 
		"female", "English");<br>// setTimeout(changeScreen, 5000);<br>
		changeScreen();<br>} else<br>{ <br>stopSound(AlphaSound[GuessLetter-1]);<br>
		playSpeech("Sorry! Please try again", "female", "English"); } <br>});<br>
		<br><br>// When pressed this ends the current game and returns to the 
		main screen.<br><br>onEvent("EndGame", "click", function( ) {<br>
		stopSound(AlphaSound[GuessLetter-1]);<br>setScreen("screen1");<br>
		console.log("EndGame clicked!");<br>});<br><br>// This loads the 
		learning screen and displays the first letter image on the screen<br>// 
		And plays the first letter sound file<br><br>onEvent("LearnButton", 
		"click", function( ) {<br>console.log("LearnButton clicked!");<br>
		setScreen("screen3");<br>setImageURL("image5", 
		LearnLetterAZ[LearnLetter]);<br>playSound(AlphaSound[LearnSound], 
		false);<br>playSound("sound://default.mp3", false);<br><br><br>// When 
		the letter is clicked it stops any sound that might be playing and 
		checks if<br>// we are at the end of the alphabet. If not it loads the 
		next letter image on to the<br>// screen, if we are at the end it starts 
		from the letter A again.<br><br>onEvent("image5", "click", function( ) {<br>
		stopSound(AlphaSound[LearnSound]);<br>if ( LearnLetter &gt; 24 ){<br>
		LearnLetter = -1;<br>}else {<br>LearnLetter = LearnLetter +1;<br>
		LearnSound = LearnLetter;<br><br>//LearnLetter = LearnLetter;<br><br>
		setImageURL("image5",LearnLetterAZ[LearnLetter]);<br>
		playSound(AlphaSound[LearnSound],false);<br>
		setTimeout(stopSound(AlphaSound[LearnSound]),1000);<br>
		setTimeout(playSpeech("Press The Letter To See And Hear The Next Letter 
		In The Alphabet", "female", "English"),1000);<br>console.log("1000 
		milliseconds have elapsed");<br>}<br>});<br><br><br><br><br><br><br><br>
		});<br>// This ends the learning game, it stops any sound that might be 
		playing at the time<br>// And it sets the variables for LearnLetter and 
		SoundLetter both to 0 then returns <br>// to the main screen.<br><br>
		onEvent("EndLearning", "click", function( ) {<br>
		stopSound(AlphaSound[LearnSound]);<br>LearnLetter = 0;<br>LearnSound = 
		0; <br>setScreen("screen1");<br>console.log("EndLearning clicked!");<br>
		<br>});</td>
		<td>&nbsp;</td>
	</tr>
</table>

</body>

</html>
